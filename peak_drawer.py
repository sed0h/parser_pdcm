import peak_info_reader
import raw_envelope_reader
import matplotlib.pyplot as plt
import envelope_and_peaks_reader_baseon_latest
from uart_envlp.threshold_peak_delta_struct_reader import extract_peaks_filter_1_2


def draw_peaks(pdcms):
    xs = []
    ys = []
    for pdcm in pdcms:
        info = peak_info_reader.extract_peak_info(pdcm)
        for i in info:
            # if i[2] > 0:
            xs.append(i[0])
            ys.append(i[2])
    print(xs, ys)
    plt.plot(xs, ys)
    for a, b in zip(xs, ys):
        plt.text(a, b, (a, b), ha='center', va='bottom', fontsize=8)
    plt.show()


def draw_envlopes(pdcms):
    xs = []
    ys = []
    j = 0
    for pdcm in pdcms:
        info = raw_envelope_reader.extract_envelope(pdcm)
        for i in info:
            xs.append(j)
            j = j + 1
            ys.append(i[1])
        # print(xs, ys)
    plt.plot(xs, ys)
    for a, b in zip(xs, ys):
        plt.text(a, b, (a, b), ha='center', va='bottom', fontsize=8)
    plt.show()



def draw(pdcms):
    xs1 = []
    ys1 = []
    j = 0
    for pdcm in pdcms:
        info = raw_envelope_reader.extract_envelope(pdcm)
        for i in info:
            xs1.append(j)
            j = j + 1
            ys1.append(i[1])
        # print(xs, ys)
    plt.plot(xs1, ys1)

    xs = []
    ys = []
    for pdcm in pdcms:
        info = peak_info_reader.extract_peak_info(pdcm)
        for i in info:
            # if i[2] > 0:
            xs.append(i[0])
            ys.append(i[2])
    print(xs, ys)
    plt.plot(xs, ys)
    # for a, b in zip(xs, ys):
    #     plt.text(a, b, (a, b), ha='center', va='bottom', fontsize=6)
    for a, b in zip(xs1, ys1):
        plt.text(a, b, (a, b), ha='center', va='bottom', fontsize=6)
    plt.show()


def draw_baseon_latest(pdcms):
    xs_l = []
    ys_l = []
    tmp_echonum = 0
    valid_cnt = 0
    hight_threshold_min = 128
    hight_threshold_max = 30000
    hight_sum = 0

    for pdcm in pdcms:
        info = envelope_and_peaks_reader_baseon_latest.extract_envelope_peaks(pdcm)
        for i in info:
            xs_l.append(i[0]+tmp_echonum)
            ys_l.append(i[1])
        if len(info) > 0:
            tmp_echonum = tmp_echonum+info[0][0]

    plt.plot(xs_l, ys_l)
    for a, b in zip(xs_l, ys_l):
        hight_sum = hight_sum + 1
        if (b >= hight_threshold_min) and (b < hight_threshold_max):
            valid_cnt = valid_cnt+1
        if a > 200:
            plt.text(a, b, (a, b), ha='center', va='bottom', fontsize=6)
    print("hight_sum:" + str(hight_sum) + ", 30000>echo_hight>128:" + str(valid_cnt))
    plt.show()


def draw_originals_and_sendouts():

    # xs = [35,36,38 ,48,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,85 ,86 ,88 ,89 ,90 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,102,103,121,122,125,126,128,129,132,133,134,135,136,137,138,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,163,164,166,167,168,169,171,172,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,224,225,226,227,228,229,230,231,233,234,235,236,237,238,239,240,241,243,247,267]
    # xs = [36 ,37 ,39 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,93 ,94 ,95 ,96 ,97 ,101,102,103,104,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,151,153,154,155,156,157,158,159,160,161,162,163,165,169,175,176,177,178,179,183,184,185,186,187,188,189,191,192,193,194,196,198,199,200,201,202,203,204,205,206,207,208,209,211,212,214,215,216,217,218,219,220,222,223,224,225,226,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,250,251,253,255,257,258,259,260,261]
    xs = [35 ,36 ,37 ,38 ,39 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,124,127,129,130,132,133,134,135,136,137,138,139,141,142,145,146,148,149,150,164,165,180,182,183,184,185,187,189,190,195,196,197,202,204,205,206,207,208,210,262]

    # ys = [40736,53568,27744,2656,2048,1216,2112,384,1664,2016,5088,6656,7328,8544,9600,10848,11616,11232,11040,10400,6496,4160,3136,4288,3232,3168,3968,3904,3584,2208,960,480,512,704,1024,672,544,576,544,640,480,576,640,480,512,544,480,608,576,480,512,768,1056,960,3584,4384,2464,512,928,1408,672,2976,4192,2240,1760,448,2112,2528,992,1760,2752,1984,704,480,768,1056,800,384,448,736,1024,640,416,480,416,384,672,512,736,1024,2048,3520,2784,1248,864,832,864,352,2304,3232,1248,736,672,1216,832,736,544,640,800,512,384,480,416,608,352,672,832,608,672,640,448,768,1056,1568,1344,2048,1760,800,480,448,512,544,736,512,544,672,544,480,320,352,512,544,448,512,416,384,448,352,320,320,320]
    # ys = [44992,49280,25504,1856,2400,2688,576,1376,3040,3104,4736,6528,6816,7808,8256,10048,11360,11104,10368,10336,6560,5536,2432,3584,3648,3168,3904,4384,3296,1728,224,256,224,256,128,192,128,160,128,160,192,512,256,160,256,192,160,512,448,288,640,1728,2240,2176,1280,288,384,1024,1056,2080,1856,224,544,384,512,384,192,800,2432,4320,2944,1184,1024,2336,3168,1984,288,256,224,256,384,256,288,256,192,224,384,832,416,352,288,224,192,256,288,320,192,320,512,384,352,512,640,384,352,320,288,384,416,256,384,416,256,384,352,224,256,384,416,1248,1600,672,320,224,256,448,416,288,352,320,352,288,512,544,384,416,544,448,2208,2688,1024,384,544,448,352,320,288,416,320,320,320]
    ys = [8448,47328,45120,12096,24576,3424,2240,2592,2560,3552,3072,2112,9824,17792,19008,11584,11808,19392,15232,18304,15712,4736,6816,8192,8704,7872,3200,3840,2816,2784,3488,3808,4640,4352,3136,1920,4000,1696,1344,1376,2240,2464,800,1184,3552,3168,672,192,1248,1664,352,1504,2080,1888,1088,416,608,736,416,448,256,480,384,352,384,480,544,704,544,224,256,352,256,192,224,192,256,320,352,288,384,352,256,512,640,576,512,256,288,192,320,192,256,224,160,256,448,320,96,128,160,224,320,416,128,96,160,128,224,352,160,64,96]

    original_ys = [40738,53573,27722,2609	,1988	,1126	,2049	,302	 ,1613	,1978	,5070	,6652	,7339	,8556	,9640	,10899,11675,11270,11054,10390,6464	,4097	,3042	,4194	,3132	,3056	,3863	,3788	,3453	,2071	,798	 ,301	 ,309	 ,505	 ,825	 ,456	 ,324	 ,338	 ,329	 ,456	 ,289	 ,391	 ,474	 ,283	 ,287	 ,349	 ,259	 ,411	 ,373	 ,276	 ,333	 ,614	 ,932	 ,824	 ,3475	,4287	,2342	,373	 ,794	 ,1300	,557	 ,2864	,4111	,2142	,1632	,300	 ,1965	,2406	,863	 ,1649	,2657	,1872	,578	 ,326	 ,625	 ,938	 ,676	 ,257	 ,326	 ,623	 ,932	 ,547	 ,303	 ,374	 ,280	 ,244	 ,558	 ,377	 ,604	 ,913	 ,1951	,3432	,2680	,1130	,725	 ,691	 ,729	 ,192	 ,2170	,3117	,1117	,593	 ,507	 ,1075	,687	 ,572	 ,367	 ,475	 ,636	 ,343	 ,190	 ,308	 ,218	 ,412	 ,156	 ,490	 ,680	 ,437	 ,509	 ,459	 ,237	 ,582	 ,883	 ,1415	,1177	,1907	,1612	,630	 ,301	 ,291	 ,364	 ,396	 ,600	 ,374	 ,408	 ,542	 ,399	 ,310	 ,130	 ,173	 ,362	 ,365	 ,258	 ,334	 ,231	 ,179	 ,267	 ,163	 ,145	 ,145	 ,213	 ,330	 ,258	 ,166	 ,180	 ,313	 ,342	 ,173	 ,205	 ,267	 ,227	 ,171	 ,145	 ,140	 ,353	 ,257	 ,162	 ,157	 ,190	 ,169	 ,362	 ,296	 ,425	 ,241	 ,153	 ,151	 ,139	 ,213	 ,198	 ,149	 ,149	 ,187	 ,166	 ,224	 ,235	 ,153	 ,169	 ,172	 ,148	 ,303	 ,421	 ,299	 ,246	 ,300	 ,232	 ,216	 ,263	 ,212	 ,156	 ,160]
    # original_ys =\
    # [45015, 49313, 25531, 1874, 2425, 2716, 594, 1411, 3106, 3177, 4824, 6629, 6918, 7932, 8407, 10217, 11545, 11281,
    #  10525, 10474, 6696, 5663, 2535, 3694, 3771, 3275, 4020, 4528, 3431, 1859, 344, 395, 359, 395, 265, 354, 265, 315,
    #  268, 273, 310, 647, 385, 261, 372, 308, 283, 640, 573, 390, 750, 1849, 2387, 2309, 1399, 403, 501, 1142, 1154,
    #  2206, 1960, 307, 648, 479, 613, 480, 258, 880, 2535, 4429, 3035, 1270, 1106, 2429, 3262, 2075, 370, 325, 285, 307,
    #  435, 307, 313, 259, 179, 232, 393, 851, 423, 343, 262, 193, 170, 234, 255, 285, 144, 282, 485, 342, 297, 470, 606,
    #  347, 285, 245, 213, 335, 335, 170, 310, 335, 165, 314, 288, 152, 152, 286, 311, 1168, 1550, 603, 251, 134, 162,
    #  366, 356, 201, 276, 242, 258, 187, 414, 414, 232, 295, 425, 329, 2105, 2615, 932, 272, 459, 353, 228, 209, 168,
    #  315, 218, 201, 306, 224, 152, 168, 224, 141, 167, 151, 168, 147, 168, 141, 167, 161, 133, 160, 140, 142, 144, 133,
    #  217, 147, 156, 310, 178, 170, 303, 308, 137, 151, 145, 148, 192, 136, 174, 133, 150, 143, 191, 185]
    xs_ = []
    if len(original_ys) > len(xs):
        original_ys = original_ys[0:len(xs)]
        xs_ = xs
    else:
        xs_ = xs[0:len(original_ys)]
        original_ys = ys
    # threshold_y = 0
    # for i in range(0, len(xs)):
    #     if (xs[i+1] - xs[i]) > 1:
    #         xs.insert(i+1, xs[i]+1)
    #         if ((i + 1) >= 32) and ((i + 1) < 47):
    #             threshold_y = 8192
    #         elif ((i + 1) >= 48) and ((i + 1) < 175):
    #             threshold_y = 256
    #         elif ((i + 1) >= 176) and ((i + 1) < 450):
    #             threshold_y = 128
    #         ys.insert(i+1, threshold_y)
    # print(xs, ys)

    # for i in range(0, len(xys)-1):
    #     if (xys[i+1][0] - xys[i][0]) > 1:
    #
    #         xys.insert(i+1, (i+1, threshold_y))

    plt.plot(xs, ys)
    # plt.plot(xs_, original_ys)
    for a, b in zip(xs, ys):
        plt.text(a, b, (a, b), ha='center', va='bottom', fontsize=6)
    # for a, b in zip(xs_, original_ys):
    #     plt.text(a, b, (a, b), ha='center', va='bottom', fontsize=6)
    plt.show()


def get_echo_nums_heights(pdcms):
    xs_ = []
    ys_ = []
    prev_echo = [[0, 0], [0, 0]]

    for pdcm in pdcms:
        xs_f1 = []
        ys_f1 = []
        xs_f2 = []
        ys_f2 = []
        extract_peaks_filter_1_2(xs_f1, ys_f1, pdcm, prev_echo)
        if len(xs_f1) > 0:
            for x_f1, y_f1 in zip(xs_f1, ys_f1):
                xs_.append(x_f1) #round(x_f1*80*17.2/1000, 2))
                ys_.append(32 * y_f1)

    return xs_, ys_


def draw_baseon_delta_height(pdcms1, pdcms2, pdcms3):
    xs1_, ys1_ = get_echo_nums_heights(pdcms1)
    # xs2_, ys2_ = get_echo_nums_heights(pdcms2)
    # xs3_, ys3_ = get_echo_nums_heights(pdcms3)

    plt.plot(xs1_, ys1_)
    # plt.plot(xs2_, ys2_)
    # plt.plot(xs3_, ys3_)

    for a, b in zip(xs1_, ys1_):
        plt.text(a, b, (a, b), ha='center', va='bottom', fontsize=6)
    # for c, d in zip(xs2_, ys2_):
    #     plt.text(c, d, (c, d), ha='center', va='bottom', fontsize=6)


    # if len(original_ys) > len(xs1_):
    #     original_ys = original_ys[0:len(xs1_)]
    # plt.plot(xs1_, original_ys)
    # for a, b in zip(xs1_, original_ys):
    #     plt.text(a, b, (a, b), ha='center', va='bottom', fontsize=6)

    plt.show()


def draw_ehcos_after_pars(echos):
    xs = []
    ys = []
    for echo in echos:
        xs.append(round(echo[0]*17.2*80/1000, 2))
        ys.append(echo[1])

    plt.plot(xs, ys)
    for a, b in zip(xs, ys):
        plt.text(a, b, (a, b), ha='center', va='bottom', fontsize=6)
    plt.show()
